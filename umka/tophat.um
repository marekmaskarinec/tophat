// Module for interacting with
// the engine.
// Useful variables:
//   delta: length of last cycle
//   platform: either "linux" or "windows"

import (
	"rawdraw.um"
	"rect.um"
	"input.um"
	"audio.um"
	"std/std.um"
)

const (
	black* = 0xff
	white* = 0xffffffff
	red* = 0xff0000ff
	green* = 0x00ff00ff
	blue* = 0x0000ffff
	yellow* = 0xffff00ff
	magenta* = 0xff00ffff
	cyan* = 0x00ffffff
)

var t*, start, end: uint
var delta*: int

var platform*: str = "linux"

fn getTime(): int

// Set's up the engine and opens a window.
fn setup*(title: str, w, h: int32) {
	rawdraw.setup(title, w, h)
	rawdraw.setBgColor(0x000000ff)
	rawdraw.clearframe()

	if std.getenv("HOME") == "" {
		input.setwinmap()
		platform = "windows"
	}

	audio.sarr = []audio.Sound{}

	t = getTime()
}

// Sets window title on runtime
fn setwindowtitle*(title: str)
fn visualizecam(w, h: int32, color: uint32)
fn updatescaling(w, h, camw, camh: int32)

// Function called each cycle.
// W and H will return the
// window size, bgcolor will
// be the background color
// of the window and cam
// is used for in engine
// stuff.
fn cycle*(w, h: ^int32, bgcolor: uint32, cam: rect.Rect) {
	rawdraw.setColor(0x000000ff)
	rawdraw.drawRect(rect.Rect{0, cam.h, w^, h^})
	rawdraw.drawRect(rect.Rect{cam.w, 0, w^, h^})
	rawdraw.swapbuffers()

	end = getTime()/1000
	delta = (end - start)
	for delta < 0 {
		delta += 1000
	}
	start = getTime()/1000
	t += delta

	rawdraw.setBgColor(0x000000ff)
	rawdraw.clearframe()
	rawdraw.handleinput()
	rawdraw.getdimensions(w, h)
	var ws, hs: int32
	rawdraw.getdimensions(&ws, &hs)

	updatescaling(ws, hs, round(cam.w), round(cam.h))

	visualizecam(round(cam.w), round(cam.h), bgcolor)
}

