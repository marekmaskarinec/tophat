// Hash map
// A key may be either a string, or any non-reference type 

import "std.um"


type (
    Any  = interface{}
    Item = struct {key, val: Any}
    Map* = [][]Item
)


const (
    defLen = 32
    rehashThreshold = 2
)


fn serialize(key: Any): []uint8 {
    // Treat a string key as a special case
    if s := ^str(key); s != null {
        bytes := make([]uint8, len(s^))
        for i, ch in s^ {
            bytes[i] = uint8(ch)
        }
        return bytes
    }

    return std.tobytes(key)    
}


fn equal(key1, key2: Any): bool {
    if !selftypeeq(key1, key2) {
        return false
    }

    // Treat a string key as a special case
    if s1, s2 := ^str(key1), ^str(key2); s1 != null && s2 != null {
        return s1^ == s2^
    }

    if selfhasptr(key1) {
        error("Cannot use reference types for map keys")
    }

    bytes1, bytes2 := serialize(key1), serialize(key2)
    
    if len(bytes1) != len(bytes2) {
        return false
    }

    for i, byte1 in bytes1 {
        if byte1 != bytes2[i] {
            return false
        }
    }

    return true
}


fn hash(key: Any): uint32 {  // djb2 hash
    bytes := serialize(key)
    var hash: uint32 = 5381;
    for byte in bytes {
        hash = (((hash << 5) + hash) + uint32(byte)) & 0xFFFFFFFF;
    }
    return hash;
}


fn (m: ^Map) rehash()


fn (m: ^Map) get*(key: Any): Any {
    if len(m^) == 0 {return null}

    b := hash(key) % len(m^)

    for item in m[b] {
        if equal(item.key, key) {
            return item.val
        } 
    }

    return null
}


fn (m: ^Map) set*(key, val: Any) {
    if len(m^) == 0 {
        m^ = make(Map, defLen)
    }

    b := hash(key) % len(m^)

    if size := len(m[b]); size == 0 {
        m[b] = []Item{Item{key, val}}
    } else {
        if size > rehashThreshold {
            m.rehash()
            b = hash(key) % len(m^)         
        } 

        for i := 0; i < len(m[b]); i++ {
            if equal(m[b][i].key, key) {
                m[b][i].val = val
                return
            }
        }

        if len(m[b]) == 0 {
            m[b] = []Item{Item{key, val}}
        } else {
            m[b] = append(m[b], Item{key, val})
        }
    }
}


fn (m: ^Map) del*(key: Any) {
    b := hash(key) % len(m^)

    for i, item in m[b] {
        if equal(item.key, key) {
            m[b] = delete(m[b], i)
            return
        } 
    }
}


fn (m: ^Map) rehash() {
    n := make(Map, 2 * len(m^))

    for bucket in m {
        for item in bucket {
            n.set(item.key, item.val)
        }
    }
  
    m^ = n
}


fn (m: ^Map) toStr(): str {
    out := "{ "

    for bucket in m^ {
        if len(bucket) == 0 {
            continue
        }

        for item in bucket {
            out += std.rtrim(repr(item.key)) + ": " + std.rtrim(repr(item.val)) + ", "
        }
    }

    if len(out) > 2 {
        out = slice(out, 0, len(out) - 2)
    }

    return out + " }"
}
