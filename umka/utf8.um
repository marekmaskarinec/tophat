// UTF-8 utilities

type (
	Rune* = int32
)

fn (r: ^Rune) size*(): int {
	if r^ <= 0x7f {
		return 1
	}

	if r^ <= 0x7ff {
		return 2
	}

	if r^ <= 0xffff {
		return 3
	}

	if r^ <= 0x10ffff {
		return 4
	}

	return 0
}

fn (r: ^Rune) encode*(): str {
	s := r.size()

	if s == 1 {
		return str(char(r^))
	}

	out := make([]char, s + 1)

	// header is size amount of ones at the start
	header := 0
	for i := 0; i < s; i++ {
		header |= 1 << (7 - i)
	}

	shift := (s - 1) * 6
	out[0] = char(((r^ >> shift & 0xff) | header) & 0xff)

	for i := 1; i < s; i++ {
		shift -= 6
		out[i] = char(r^ >> shift & 0x3f | 0x80)
	}

	return str(out)
}

fn umth_utf8_get_next_rune*(a: str, pos: int): Rune
fn getNextRune*(a: str, pos: int): Rune {
	return umth_utf8_get_next_rune(a, pos)
}

fn decode*(s: str): []Rune {
	runes := make([]Rune, len(s))
	runeCount := 0

	l := len(s)
	
	for i := 0; i < l; runeCount++ {
		runes[runeCount] = getNextRune(s, i)
		i += runes[runeCount].size()
	}

	return slice(runes, 0, runeCount)
}

fn realLength*(s: str): int {
	rl := 0
	l := len(s)
	for i := 0; i < l; rl++ {
		r := getNextRune(s, i)
		i += r.size()
	}

	return rl
}
