
import (
	"polygon.um"
	"tophat.um"
	"rectangle.um"
	"std/std.um"
	"image.um"
	"th.um"
)

// Entity is the main object in most games. It allow for drawing and collisions.
// Every entity has a polygon and optionally an image. If there is no image,
// polygon is drawn. Polygon is used for collisions too. Entity has rot and
// scale fields. You can set them manually (myent.rot = 20), but that won't
// change the polygon. For changing the polygon itself, use setrot and setscale.
type ent* = struct {
	r: rectangle.rect
	i: image.img
	t: th.transform
	c: uint32
}

var colldatax, colldatay: int32

fn centdraw(e: ^ent, c: ^rectangle.rect)

// Draws the entity onto the screen in relaction to camera c.
fn (e: ^ent) draw*(c: rectangle.rect) {
	centdraw(e, &c)
}

fn cgetcoll(ic: ^th.vf2, count: int32, e: ^ent, s: ^^ent): int32

// ent's constructor
fn mk*(img: image.img, t: th.transform): ent {
	var e: ent
	e.i = img
	e.t = t
	dm := img.getdims()
	e.r.w = dm.x
	e.r.h = dm.y
	e.c = 0xff

	return e
}

// Checks whether e collides with any of the entities in s. If e has the same
// is as any of the entities in s, they will be skipped. Collision returns
// id of the colliding entity.
// WARNING: This function will recieve a lot of changes. It will return an
//   an array of indexes in s, where colliding entities lie.
fn (e: ^ent) getcoll*(s: []^ent, ic: ^th.vf2): int32 {
	if len(s) == 0 {
		return 0
	}

	return cgetcoll(ic, len(s), e, &s[0])
}

// Animates the entity's image with one of the `anim` array. **Won't** begin on
// the first frame. If you with that, use animation.anim.
fn (e: ^ent) animate*(fps: int, anim: ^[]image.img) {
	e.i = anim^[(round(real(tophat.t)/(1000/fps)) % len(anim^))]
}

fn centysort(e: ^entity.ent, count: int)

// Performs a y sort on entities.
fn ysort*(ents: ^[]entity.ent) {
	if len(ents^) > 0 {
		centysort(&ents[0], len(ents^))
	}
}
