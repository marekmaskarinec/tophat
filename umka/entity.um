// vim: filetype=umka

import (
	"polygon.um"
	"rectangle.um"
	"std/std.um"
	"image.um"
)

type ent* = struct {
	p: polygon.poly
	image: image.img	
	color: uint32
	id: int32
}

type cent = struct {
	p: ^polygon.cpoly
	image: image.img
	color: uint32
	id: int32
}

//fn (e: ^ent) getcoll(s: scene.scn)

fn tocent(e: ^ent): cent {
	cp := polygon.cpoly{e.p.x, e.p.y, &e.p.v[0], e.p.w, e.p.h, e.p.vc}
	ce := cent{&cp, 0, e.color, e.id}

	return ce
}

fn centdraw(e: cent, c: rectangle.rect)

fn (e: ^ent) draw*(c: rectangle.rect) {
	cp := polygon.cpoly{e.p.x, e.p.y, &e.p.v[0], e.p.w, e.p.h, e.p.vc}
	ce := cent{&cp, e.image, e.color, e.id}

	centdraw(ce, c)
}

fn cgetcoll(count: int32, e: ^cent, s: ^cent): int32

fn mk*(p: polygon.poly, color: uint32, id: int32): ent {
	if id == 0 {
		id = std.rand() + 1
	}

	var e: ent
	e.p = p
	e.image = 0
	e.color = color
	e.id = id

	return e
}

fn (e: ^ent) getcoll*(s: []^ent): int32 {
	cscn := []cent{}
	cps := []polygon.cpoly{}

	for e in s {
		cps = append(cps, []polygon.cpoly{polygon.cpoly{e.p.x, e.p.y, &e.p.v[0], e.p.w, e.p.h, e.p.vc}})
		ce := cent{null, e.image, e.color, e.id}
		cscn = append(cscn, []cent{ce})
	}

	for i:=0; i < len(cps); i++ {
		cscn[i].p = &cps[i]
	}

	cp := polygon.cpoly{e.p.x, e.p.y, &e.p.v[0], e.p.w, e.p.h, e.p.vc}
	ce := cent{&cp, e.image, e.color, e.id}
	return cgetcoll(len(cscn), &ce, &cscn[0])
}
