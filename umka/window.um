// Module for interacting with
// the engine.
// Useful variables:
//   delta: length of last cycle
//   platform: either "linux" or "windows"

import (
	"th.um"
	"canvas.um"
	"rect.um"
	"input.um"
	"std/std.um"
)

var (
	start, end, clockOffset: real
	w*, h*: int32
)

fn getTime(): int

fn wsetup(title: str, w, h: int)
fn clearframe()
fn getdimensions(w, h: ^int32)
fn swapbuffers()
fn handleinput(): bool
// Set's up the engine and opens a window.
fn setup*(title: str, w, h: int32) {
	wsetup(title, w, h)
	canvas.setBgColor(0x000000ff)
	clearframe()

	if std.getenv("HOME") == "" {
		th.platform = "windows"
	}

	clockOffset = std.clock() * 1000
}

// Sets window title on runtime
fn setwindowtitle*(title: str)
fn visualizecam(w, h: int32, color: uint32)
fn updatescaling(w, h, camw, camh: int32)

// Cycle needs to be called every cycle. Pass the currently used camera, which
// i used to calculate tophat's scaling. It returns true, if the window is
// still running.
fn cycle*(cam: rect.Rect): bool {
	canvas.setColor(0x000000ff)
	canvas.drawRect(rect.Rect{0, cam.h, w, h})
	canvas.drawRect(rect.Rect{cam.w, 0, w, h})
	swapbuffers()

	end = std.clock()*1000
	th.delta = round(end - start)
	start = std.clock()*1000
	th.time = round(start - clockOffset)

	canvas.setBgColor(0x000000ff)
	clearframe()
	running := handleinput()
	getdimensions(&w, &h)

	updatescaling(w, h, round(cam.w), round(cam.h))
	return running
}

