// Builtin collision functions. The ic argument stores the collision position.

import (
	"th.um"
	"rect.um"
)

fn umth_coll_line_to_line(b1, e1, b2, e2, ic: ^th.Vf2): bool
// Checks for a collision between 2 lines specified by their end points.
fn lineToLine*(b1, e1, b2, e2: th.Vf2, ic: ^th.Vf2): bool {
	return umth_coll_line_to_line(&b1, &e1, &b2, &e2, ic)
}

fn umth_coll_point_to_quad(p: ^th.Vf2, q: ^th.Quad, ic: ^th.Vf2): bool
// Checks for a collision between a vf2 and a quad.
fn vf2ToQuad*(p: th.Vf2, q: th.Quad, ic: ^th.Vf2): bool {
	return umth_coll_point_to_quad(&p, &q, ic)
}

fn umth_coll_line_to_quad(b, e: ^th.Vf2, q: ^th.Quad, ic: ^th.Vf2): bool
// Check for a collision between a line and quad edges.
fn lineToQuad*(b, e: th.Vf2, q: th.Quad, ic: ^th.Vf2): bool {
	return umth_coll_line_to_quad(&b, &e, &q, ic)
}

fn umth_coll_quad_to_quad(q1, q2: ^th.Quad, ic: ^th.Vf2): bool
// Check for a collision between two quads.
fn quadToQuad*(q1, q2: th.Quad, ic: ^th.Vf2): bool {
	return umth_coll_quad_to_quad(&q1, &q2, ic)
}

