// Builtin collision functions. The ic argument stores the collision position.

import (
	"th.um"
	"rect.um"
)

fn ccolllinetoline(b1, e1, b2, e2, ic: ^th.Vf2): bool
// Checks for a collision between 2 lines specified by their end points.
fn lineToLine*(b1, e1, b2, e2: th.Vf2, ic: ^th.Vf2): bool {
	return ccolllinetoline(&b1, &e1, &b2, &e2, ic)
}

fn ccollpointtoquad(p: ^th.Vf2, q: ^th.Quad, ic: ^th.Vf2): bool
// Checks for a collision between a vf2 and a quad.
fn vf2ToQuad*(p: th.Vf2, q: th.Quad, ic: ^th.Vf2): bool {
	return ccollpointtoquad(&p, &q, ic)
}

fn ccolllinetoquad(b, e: ^th.Vf2, q: ^th.Quad, ic: ^th.Vf2): bool
// Check for a collision between a line and quad edges.
fn lineToQuad*(b, e: th.Vf2, q: th.Quad, ic: ^th.Vf2): bool {
	return ccolllinetoquad(&b, &e, &q, ic)
}

fn ccollquadtoquad(q1, q2: ^th.Quad, ic: ^th.Vf2): bool
// Check for a collision between two quads.
fn quadToQuad*(q1, q2: th.Quad, ic: ^th.Vf2): bool {
	return ccollquadtoquad(&q1, &q2, ic)
}

fn umth_coll_point_to_matrix(p: th.Vf2, m: ^[]th.iu, w: th.uu, c: ^[]bool,
	t:^th.Transform, ic: ^th.Vf2): bool
// Check for a collision of a point on a matrix.
// `p` - the point to be checked
// `m` - the matrix to be checked on
// `w` - width of the matrix
// `c` - collision mask. c[tile] is true if tile should have collisions
//       enabled.
// `t` - transform of the matrix. If you use this with an atlas, you should
//       multiply the scale by atl.cs.
// `ic` - on collision p will be stored in that pointer.
fn pointToMatrix*(p: th.Vf2, m: []th.iu, w: th.uu, c: []bool, t: th.Transform, ic: ^th.Vf2): bool {
	return umth_coll_point_to_matrix(p, &m, w, &c, &t, ic)
}
