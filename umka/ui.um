
import (
	"rectangle.um"
	"rawdraw.um"
	"input.um"
)

type element* = interface {
	draw()
	calculate()
	gspan(): ^int
	gpadding(): ^rectangle.rect
	gdimensions(): ^rectangle.rect
}

type hbox* = struct {
	children: []element
	padding, dimensions: rectangle.rect
	span: int
}

type label* = struct {
	text: str
	textsize: real
	textcolor: uint32
	bgcolor: uint32
	padding, dimensions: rectangle.rect
	span: int
}

type button* = struct {
	label: label
	toggled: bool
	pressed: bool
	justpressed: bool
	clickfunc: bool

	padding, dimensions: rectangle.rect
	span: int
}

////////////////////////////////
// hbox

fn mkhbox*(c: []element): hbox {
	h := hbox {}

	h.padding = rectangle.mk(0, 0, 0, 0)
	h.children = c
	h.dimensions = rectangle.mk(0, 0, 0, 0)
	h.span = 1

	return h
}

fn (hb: ^hbox) calculate*() {

	totalspan := 0
	cy := 0

	for i:=0; i < len(hb.children); i++ {
		totalspan += hb.children[i].gspan()^
	}

	for i:=0; i < len(hb.children); i++ {

		dims := hb.children[i].gdimensions()
		padd := hb.children[i].gpadding()

		dims.x = hb.dimensions.x + padd.x
		dims.w = hb.dimensions.w - padd.w - hb.padding.w

		dims.y = hb.dimensions.y + cy + padd.y
		dims.h = hb.dimensions.h/totalspan - padd.h - hb.padding.h

		hb.children[i].calculate()

		cy += hb.dimensions.h/totalspan * hb.children[i].gspan()^
	}
}

fn (hb: ^hbox) draw*() {
	for i:=0; i < len(hb.children); i++ {
		hb.children[i].draw()
	}
}

fn (hb: ^hbox) gspan*(): ^int {
	return &hb.span
}

fn (hb: ^hbox) gpadding*(): ^rectangle.rect {
	return &hb.padding
}

fn (hb: ^hbox) gdimensions*(): ^rectangle.rect {
	return &hb.dimensions
}

////////////////////////////////
// label

fn mklabel*(text: str, textsize: real, textcolor: uint32): label {
	h := label {}

	h.text = text
	h.textsize = textsize
	h.textcolor = textcolor
	h.bgcolor = 0x0
	h.padding = rectangle.mk(0, 0, 0, 0)
	h.dimensions = rectangle.mk(0, 0, 0, 0)
	h.span = 1

	return h
}

fn (l: ^label) calculate*() {}

fn (l: ^label) draw*() {
	rawdraw.setcolor(l.bgcolor)
	rawdraw.drawrect(l.dimensions.x, l.dimensions.y, l.dimensions.w, l.dimensions.h)

	rawdraw.drawtext(l.text, l.dimensions.x, l.dimensions.y, l.textcolor, l.textsize)
}

fn (l: ^label) gspan*(): ^int {
	return &l.span
}

fn (l: ^label) gpadding*(): ^rectangle.rect {
	return &l.padding
}

fn (l: ^label) gdimensions*(): ^rectangle.rect {
	return &l.dimensions
}

////////////////////////////////
// button

fn mkbutton*(l: label): button {
	b := button{}

	b.padding = l.padding
	b.label = l
	b.pressed = false
	b.justpressed = false
	b.toggled = false
	b.span = 1

	return b
}

fn (b: ^button) calculate*() {
	b.label.dimensions = b.dimensions

	mx, my := input.getmousepos()
	mp := input.ispressed(input.LMB)

	ms := (b.dimensions.x <= mx && b.dimensions.y <= my && mx <= b.dimensions.x + b.dimensions.w && my <= b.dimensions.y + b.dimensions.h)
	//printf("%d, %d, %d, %d\n", b.dimensions.x, b.dimensions.y, b.dimensions.x + b.dimensions.w, b.dimensions.y + b.dimensions.h)

	b.justpressed = false

	if ms && mp {
		if !b.pressed {
			b.justpressed = true
		}
		b.pressed = true
	} else {
		b.pressed = false
	}

	if b.justpressed {
		b.toggled = !b.toggled
	}
}

fn (b: ^button) draw*() {
	b.label.draw()
}

fn (b: ^button) gspan*(): ^int {
	return &b.span
}

fn (b: ^button) gpadding*(): ^rectangle.rect {
	return &b.padding
}

fn (b: ^button) gdimensions*(): ^rectangle.rect {
	return &b.dimensions
}

////////////////////////////////
// main handler

var main*: element

fn handle*(w, h: int32) {
	dims := main.gdimensions()
	padd := main.gpadding()
	dims.x = padd.x
	dims.y = padd.y
	dims.w = w - padd.w
	dims.h = h - padd.h
	main.calculate()
	main.draw()
}
