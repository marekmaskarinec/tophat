// <b>TO BE DELETED</b>

import (
	"th.um"
	"rect.um"
)

// Mask is a set of dots that can be edited and drawn to emulate light.
// You can even edit the dots yourself, but it won't look good with multiple
// lights. A function for plotting a pixel will be available soon.
type Mask* = struct {
	dots: []uint32
	w, h: th.uu
	rectSize: th.fu
	color: uint32
}

type cmask = struct {
	dots: ^uint32
	w, h: th.uu
	rectsize: th.fu
	color: uint32
}

// A circular light that can be plotted onto a mask.
type Spotlight* = struct {
	pos: th.Vf2
	radius: th.uu
	tint: uint32
}

fn clightmaskclear(m: ^cmask)

// Clears the lightmask to have it's own default color.
fn (m: ^Mask) clear*() {
	cm := cmask {
		&m.dots[0],
		m.w, m.h, m.rectSize,
		m.color}

	clightmaskclear(&cm)
}

fn mk*(color: uint32, rectSize: real, cam: rect.Rect): Mask {
	d := Mask{}

	d.rectSize = rectSize
	d.w = round(cam.w / rectSize)
	d.h = round(cam.h / rectSize)
	d.dots = make([]uint32, d.w * d.h)
	d.color = color

	d.clear()

	return d
}

fn clightmaskdraw(m: ^cmask, cam: ^rect.Rect)

// Draws a lightmask.
fn (m: ^Mask) draw*(cam: rect.Rect) {
	cm := cmask {
		&m.dots[0],
		m.w, m.h, m.rectSize,
		m.color}

	clightmaskdraw(&cm, &cam)
}

fn cspotlightstamp(s: ^Spotlight, m: ^cmask, cam: ^rect.Rect)

// Stamps a spotlight onto a mask.
fn (s: ^Spotlight) stamp*(m: ^Mask, cam: rect.Rect) {
	cm := cmask {
		&m.dots[0],
		m.w, m.h, m.rectSize,
		m.color}

	cspotlightstamp(s, &cm, &cam)
}

