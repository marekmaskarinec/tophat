// Polygon type and functions.

import (
	"std/std.um"
	"vec.um"
	"rawdraw.um"
)

// Polygon type. Mainly
// used by ent for collisions
// and for fallback drawing
// Don't create by hand.
type poly* = struct {
    x: real // position
    y: real
    v: []int32 // vertices [x, y, x, y]. Might be soon converted to real.
		rv: []int32 // don't touch
		rw: int32
		rh: int32 // end of don't touch
    w: int32 // width **TO BE REMOVED**
    h: int32 // height **TO BE REMOVED**
    vc: int32 // vertex count **TO BE REMOVED**
}

// Representation of poly in c.
type cpoly* = struct {
	x: int32
	y: int32
	v: ^int32
	w: int32
	h: int32
	vc: int32
}

// Internal function converting p to c compatible polygon
fn (p: ^poly) toc*(): cpoly {
	if len(p.v) == 0 {
		return cpoly{}
	}

	return cpoly{
		round(p.x), round(p.y),
		&p.v[0], p.w, p.h, len(p.v) * 2}
}

// Makes a polygon. *USE* this.
fn mk*(x, y: real, v: []int32): poly {
	var p: poly

	p.vc = int32(len(v)/2)
	p.v = v
	p.x = x
	p.y = y

	var maxx, maxy: int32;

	for i:=0; i < len(v); i += 2 {
		if fabs(real(v[i])) > maxx { maxx = round(fabs(real(v[i]))) }
		
		if fabs(real(v[i + 1])) > maxy { maxy = round(fabs(real(v[i + 1]))) }
	}

	p.w = maxx
	p.h = maxy
	p.rw = p.w
	p.rh = p.h
	p.rv = v

	return p
}

// Rotates and scales the polygon (scales first)
fn (p: ^poly) transform*(sx, sy: real, rot: int32) {
	var x, y, cx, cy: real

	cx = round(p.rw/2 * sx)
	cy = round(p.rh/2 * sy)
	
	var w, h: int32

	v := []int32{}

	for i:=0; i<len(p.v); i+=2 {

		x = p.rv[i] * sx
		y = p.rv[i+1] * sy

		tx, ty := vec.rotatepoint(x, y, cx, cy, rot)

		if tx > w {
			w = round(tx)
		}
		if ty > h {
			h = round(ty)
		}

		v = append(v, []int32{round(tx), round(ty)})
	}

	p.v = v
	p.w = w
	p.h = h
}

fn cdrawpoly*(color: uint32, p: ^polygon.cpoly)

// Draws this without accounting for camera.
fn (p: ^poly) draw*(color: uint32) {
	cp := polygon.cpoly{round(p.x), round(p.y), &p.v[0], p.w, p.h, p.vc}

	cdrawpoly(color, &cp)
}
