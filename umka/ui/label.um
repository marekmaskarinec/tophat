
import (
	"th.um"
	"utf8.um"
	"rect.um"
	"../ui.um"
	"canvas.um"
)

// An element containing a TextRenderer. The text renderer supports
// word-wrapping and centered text.
type Label* = struct {
	g: ui.Generic
	text: str
	renderer: ui.TextRenderer
	center: bool
	wrapping: bool
	scale: th.fu
}

// Label constructor
fn mk*(f: ui.TextRenderer, text: str, theme: ui.Theme, scale: th.fu, center: bool = false, wrapping: bool = false): Label {
	l := Label{}
	l.g = ui.mkGeneric()
	l.g.theme = theme
	l.text = text
	l.renderer = f
	l.scale = scale
	l.center = center
	l.wrapping = wrapping

	return l
}

fn (l: ^Label) get*(): ^ui.Generic {
	return &l.g
}

fn (l: ^Label) handle*() {
	l.g.handle()
}

fn (l: ^Label) draw*() {
	if len(l.text) == 0 {
		return
	}

	canvas.drawRect(l.g.theme.bg, rect.Rect{l.g.r.x, l.g.r.y, l.g.r.w, l.g.r.h})
	ui.drawBorder(l.g.r.getPos(), l.g.r.getDims(), l.g.theme)

	text := utf8.decode(l.text)
	// hack to wrap the last word too
	text = append(text, uint32(' '))
	lineCount := 1

	lines := [][]utf8.Rune{}

	if l.wrapping {
		limit := l.g.r.w - l.g.theme.borderSize * 2
		wordStart := 0
		lineWidth := 0.0

		for i:=0; i < len(text); i++ {
			if text[i] == uint32(' ') {
				if lineWidth > limit {
					lines = append(lines, slice(text, 0, wordStart))
					text = slice(text, wordStart - 1)

					wordStart = 0
					lineWidth = 0
					i = -1
					continue
				}

				wordStart = i + 1
				lineWidth += l.renderer.measure(" ").x * l.scale
			} else if text[i] == uint32('\n') {
				lines = append(lines, slice(text, 0, i))
				text = slice(text, i + 1)

				wordStart = 0
				lineWidth = 0
				i = -1
			} else {
				lineWidth += l.renderer.measure(text[i].encode()).x * l.scale
			}
		}

		// we have to remove the space again to prevent alignment issues
		lines = append(lines, slice(text, 0, len(text) - 1))
	} else {
		lines = append(lines, text)
	}

	x := l.g.r.x + l.g.theme.borderSize
	y := l.g.r.y
	if l.center {
		y += (l.g.r.h - len(lines) * l.renderer.measure("A").y * l.scale) / 2
	}

	for i in lines {
		s := ""
		for j in lines[i] {
			s += lines[i][j].encode()
		}

		p := th.Vf2{
			x: x,
			y: y }

		if l.center {
			p.x += (l.g.r.w - l.renderer.measure(s).x * l.scale) / 2 + l.g.theme.borderSize / 2
		}

		l.renderer.draw(s, p, l.g.theme.fg, l.scale)

		y += l.renderer.measure(s).y * l.scale
	}
}

