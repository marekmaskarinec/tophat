// Raw canvas library named after
// cnlohr's rawdraw library,
// which is what tophat uses.

import (
	"std/std.um"
	"polygon.um"
)

// Draws text. Fonts are comming
// eventually.
fn drawtext*(text: str, x: int32, y: int32, color: uint32, size: real)

// Precomputes a text dimensions.
fn textsize*(text: str, scale: real): (int, int) {
	var w, maxw, h: int
	w = 0
	maxw = 0
	h = 1

	for s in text {
		if s == "\n" {
			h += 1
			if w > maxw {
				maxw = w
			}

			continue
		}

		w++
	}

	if w > maxw {
		maxw = w
	}

	return round(maxw * scale * 3 - scale), round(h * 6 * scale)
}

// Sets up a window (use tophat's functions instead).
fn setup*(title: str, w, h: int)

// Sets bg color of the window (already in tophat.cycle)
fn setbgcolor*(color: int)

// Clears the screen (already in tophat.cycle)
fn clearframe*()

// Sets drawing color.
fn setcolor*(color: int)

// Returns raw window dimension (already in tophat.cycle)
fn getdimensions*(w, h: ^int32)

// Finishes the cycle (already in tophat.cycle)
fn swapbuffers*()

// Handles input (already in tophat.cycle)
fn handleinput*()

fn drawsegment(x1, y1, x2, y2: int32, s: real)

// Draws a rectangle.
fn drawrect*(x1, y1, x2, y2: real)

// Draws a line.
fn drawline*(x1, y1, x2, y2: int32, thickness: real, color: uint32) {
	setcolor(color)
	drawsegment(x1, y1, x2, y2, thickness)
}

// Ignore.
fn cdrawimage*(img: int, rot: int32, scale: real, x, y: int32)
