//~~
// A module for importless communication between modules. A signal is a set of
// callbacks.  You can use signals directly in your own structs if you want
// them to be instance specific, of you can use global signals which are
// adressed by a string name.
//~~

import (
	"std.um"
	"th.um"
)

//~~type Callback
// `args` is a list of arguments passed to the `emit` method.
type Callback* = fn(args: []any)
//~~

//~~type Id
type Id* = uint
//~~

//~~type Signal
type Signal* = map[Id]Callback
//~~

var signals: map[str]Signal
var idCounter: Id

//~~fn mk
// `Signal` constructor
fn mk*(): Signal {
//~~
	return make(Signal)
}

//~~fn Signal.register
// Registers a callback to a signal and returns the callback id.
fn (this: ^Signal) register*(callback: Callback): Id {
//~~
	idCounter++
	this[idCounter] = callback

	return idCounter
}

//~~fn Signal.remove
// Removes a callback by id.
fn (this: ^Signal) remove*(id: Id) {
//~~
	delete(this^, id)
}

//~~fn Signal.emit
// Emits a signal.
fn (this: ^Signal) emit*(args: ..any) {
//~~
	for _,c in this {
		c(args)
	}
}

//~~fn Signal.clear
// Removes all signal handlers.
fn (this: ^Signal) clear*() {
//~~
	ks := keys(this^)

	for i, k in ks {
		this ^= delete(this^, k)
	}
}

//~~fn register
// Registers a callback to a global signal.  There is no need to explicitly
// create global signals.  Returns id of the added callback
fn register*(name: str, callback: Callback): Id {
//~~
	if !valid(signals) {
		signals = make(map[str]Signal)
	}

	return signals[name].register(callback)
}

//~~fn remove
// Removes a callback from a global signal by id.
fn remove*(name: str, id: Id) {
//~~
	signals[name].remove(id)
}

//~~fn remove
// Removes all signal handlers from a global signal.
fn clear*(name: str) {
//~~
	signals[name].clear()
}

//~~fn emit
// Calls all callbacks associated with the passed global signal name.
fn emit*(name: str, args: ..any): std::Err {
//~~
	if !valid(signals) {
		signals = make(map[str]Signal)
	}

	if !validkey(signals, name) {
		return th::__errFromCode(.bad_input, "unknown signal")
	}

	signals[name].emit(args)

	return {}
}
