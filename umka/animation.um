// Module for frame based animation.

import (
	"th.um"
	"image.um"
	"rectangle.um"
)

// Anim can turn an array of images into an animation. The difference between
// anim and ent.animate is that anim has starting time, so it is useful for
// one shot animations.
type anim* = struct {
	anim: []image.img
	rot: th.fu
	scale: th.fu
	fps: th.uu
	looping: bool

	pos: th.vf2

	zerotime: int

	frame: int
}

// Anim's constructor.
fn mk*(pos: th.vf2, anm: []image.img, fps: th.uu): anim {
	a := anim{}

	a.anim = append(anm, anm[len(anm)-1])

	a.fps = fps
	a.scale = 1
	a.rot = 0

	a.pos = pos

	a.looping = false

	return a
}

// Starts animation with start_time of t.
fn (a: ^anim) start*(t: int) {
	a.zerotime = t
}

// This draws the animation. Returns true, if the animation ends.
fn (a: ^anim) handle*(t: uint, cam: rectangle.rect): bool {
	a.frame = (round(real(t-a.zerotime)/round((1000.0/a.fps))) % len(a.anim))

	a.anim[a.frame].draw(round(a.pos.x) - cam.x + cam.w/2, round(a.pos.y) - cam.y + cam.h/2, round(a.rot), a.scale)

	if a.frame == len(a.anim) - 1 {
		if a.looping {
			a.zerotime = t
		} else {
			return true
		}
	}

	return false
}
