
import (
	"th.um"	
)

// A set of points representing a rectangle.
type Rect* = struct {
	x, y, w, h: th.fu
}

fn mk*(x, y, w, h: th.fu): Rect {
	var r: Rect

	r.x = x
	r.y = y
	r.w = w
	r.h = h

	return r
}

// translates screen coordinates to world coordinates with cam r
fn (r: ^Rect) toWorld*(p: th.Vf2): th.Vf2 {
	return th.Vf2{ p.x + r.x - r.w/2, p.y + r.y - r.h/2 }
}

// translates world coordinates to screen coordinates with cam r
fn (r: ^Rect) toScreen*(p: th.Vf2): th.Vf2 {
	return th.Vf2{ p.x - r.x + r.w/2, p.y - r.y + r.h/2 }
}

fn (r: ^Rect) getPos*(): th.Vf2 {
	return th.Vf2{r.x, r.y}
}

fn (r: ^Rect) getDims*(): th.Vf2 {
	return th.Vf2{r.w, r.h}
}

// returns where the second point of the rectangle lies.
fn (r: ^Rect) getEnd*(): th.Vf2 {
	return th.Vf2{r.x+r.w, r.y+r.h}
}

fn umth_transform_rect(ret: ^th.Quad, r: ^Rect, t: ^th.Transform)
// Transforms a rect into a quad.
// Order:
// 	1. scale
// 	2. rotation
// 	3. position
fn (r: ^Rect) transformed*(t: th.Transform): th.Quad {
	var ret: th.Quad
	umth_transform_rect(&ret, r, &t)

	return ret
}
