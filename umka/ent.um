
import (
	"rect.um"
	"image.um"
	"th.um"
)

//~~struct Ent
// Entity is the main game object. It features drawing and collisions.
// Every entity has an image used for drawing and a rectangle used
// for collisions. It also has a transform used for transforming it's image
// and rectangle.
type Ent* = struct {
	// used as a collider, used as backup when invalid image is supplied
	r: rect::Rect
	// used in drawing
	i: image::Image
	// used to transform and translate the image and rect
	t: th::Transform
	// used as a color of the rect and a color filter for the image
	c: uint32
}
//~~

//~~struct Coll
// Value returned by get coll. It contains a position where the collision
// happened and the index of the entity involved in said collision.
type Coll* = struct {
	index: th::uu
	pos: th::Vf2
}
//~~

fn umth_ent_draw(e: ^Ent)
//~~fn Ent.draw
// Draws the entity onto the screen.
fn (e: ^Ent) draw*() {
//~~
	umth_ent_draw(e)
}

//~~fn mk
// ent's constructor
fn mk*(img: image::Image = image::Image{}, t: th::Transform = th::Transform{ s: th::Vf2{1, 1} }): Ent {
//~~
	var e: Ent
	e.i = img
	e.t = t
	if img.validate() {
		dm := img.getDims()
		e.r.w = dm.x
		e.r.h = dm.y
	}
	e.c = th::white

	if t.s.x == 0 && t.s.y == 0 {
		t.s = th::Vf2{ 1, 1 }
	}

	return e
}

fn umth_ent_getcoll(coll: ^Coll, collC: ^int, maxCount: th::uu, count: int32,
	e: ^Ent, s: ^^Ent)
//~~fn Ent.getColl
// Checks collisions of e with entities in s. Checks at max maxColl collisions.
// If s contains e, the collision won't be returned.
fn (e: ^Ent) getColl*(s: []^Ent, maxColls: th::uu): []Coll {
//~~
	if len(s) == 0 {
		return []Coll{}
	}

	if maxColls > len(s) {
		maxColls = len(s)
	}

	if maxColls == 0 {
		maxColls = 1
	}

	colls := make([]Coll, maxColls)
	count := 0
	umth_ent_getcoll(&colls[0], &count, maxColls, len(s), e, &s[0])

	return slice(colls, 0, count)
}

//~~fn Ent.animate
// Animates the entity's image with one of the `anim` array. <b>Won't</b> begin on
// the first frame. If you want that, use anim.Anim.
fn (e: ^Ent) animate*(fps: int, frames: ^[]image::Image, t: int) {
//~~
	if len(frames^) == 0 {
		return
	}	

	e.i = frames^[(round(real(t)/(1000/fps)) % len(frames^))]
}

