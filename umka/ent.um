
import (
	"tophat.um"
	"rect.um"
	"std/std.um"
	"image.um"
	"th.um"
)

// Entity is the main object in most games. It allow for drawing and collisions.
// Every entity has a polygon and optionally an image. If there is no image,
// polygon is drawn. Polygon is used for collisions too. Entity has rot and
// scale fields. You can set them manually (myent.rot = 20), but that won't
// change the polygon. For changing the polygon itself, use setrot and setscale.
type Ent* = struct {
	r: rect.Rect
	i: image.Image
	t: th.Transform
	c: uint32
}

fn centdraw(e: ^Ent, c: ^rect.Rect)

// Draws the entity onto the screen in relaction to camera c.
fn (e: ^Ent) draw*(c: rect.Rect) {
	centdraw(e, &c)
}

fn cgetcoll(ic: ^th.Vf2, count: int32, e: ^Ent, s: ^^Ent): int32

// ent's constructor
fn mk*(img: image.Image, t: th.Transform): Ent {
	var e: Ent
	e.i = img
	e.t = t
	dm := img.getDims()
	e.r.w = dm.x
	e.r.h = dm.y
	e.c = 0xff

	return e
}

// Checks whether e collides with any of the entities in s. If e has the same
// is as any of the entities in s, they will be skipped. Collision returns
// id of the colliding entity.
// WARNING: This function will recieve a lot of changes. It will return an
//   an array of indexes in s, where colliding entities lie.
fn (e: ^Ent) getColl*(s: []^Ent, ic: ^th.Vf2): int32 {
	if len(s) == 0 {
		return 0
	}

	return cgetcoll(ic, len(s), e, &s[0])
}

// Animates the entity's image with one of the `anim` array. **Won't** begin on
// the first frame. If you with that, use animation.anim.
fn (e: ^Ent) animate*(fps: int, frames: ^[]image.Image) {
	e.i = frames^[(round(real(tophat.t)/(1000/fps)) % len(frames^))]
}

fn centysort(e: ^ent.Ent, count: int)

// Performs a y sort on entities.
fn ysort*(ents: ^[]ent.Ent) {
	if len(ents^) > 0 {
		centysort(&ents[0], len(ents^))
	}
}
