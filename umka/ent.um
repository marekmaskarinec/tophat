
import (
	"rect.um"
	"std/std.um"
	"image.um"
	"th.um"
)

// Entity is the main game object. It features drawing and collisions.
// Every entity has an image used for drawing and a rectangle used
// for collisions. It also has a transform used for transforming it's image
// and rectangle.
type Ent* = struct {
	r: rect.Rect
	i: image.Image
	t: th.Transform
	c: uint32
}

type Coll* = struct {
	index: th.uu
	pos: th.Vf2
}

fn centdraw(e: ^Ent, c: ^rect.Rect)

// Draws the entity onto the screen in relaction to camera c.
fn (e: ^Ent) draw*(c: rect.Rect) {
	centdraw(e, &c)
}

fn cgetcoll(coll: ^Coll, collC: ^int, maxCount: th.uu, count: int32, e: ^Ent, s: ^^Ent)

// ent's constructor
fn mk*(img: image.Image, t: th.Transform): Ent {
	var e: Ent
	e.i = img
	e.t = t
	dm := img.getDims()
	e.r.w = dm.x
	e.r.h = dm.y
	e.c = 0xff

	return e
}

// Checks collisions of e with entities in s. Checks at max maxColl collisions.
fn (e: ^Ent) getColl*(s: []^Ent, maxColls: th.uu): []Coll {
	if len(s) == 0 {
		return []Coll{}
	}

	if maxColls > len(s) {
		maxColls = len(s)
	}

	if maxColls == 0 {
		maxColls = 1
	}

	colls := make([]Coll, maxColls)
	count := 0
	cgetcoll(&colls[0], &count, maxColls, len(s), e, &s[0])

	return slice(colls, 0, count)
}

// Animates the entity's image with one of the `anim` array. **Won't** begin on
// the first frame. If you want that, use anim.Anim.
fn (e: ^Ent) animate*(fps: int, frames: ^[]image.Image, t: int) {
	e.i = frames^[(round(real(t)/(1000/fps)) % len(frames^))]
}

fn centysort(e: ^ent.Ent, count: int)

// Performs a y sort on entities.
fn ysort*(ents: ^[]ent.Ent) {
	if len(ents^) > 0 {
		centysort(&ents[0], len(ents^))
	}
}
