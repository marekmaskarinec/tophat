//~~
// Module for font rendering. Unicode is supported, but only left to right.
//~~

import (
	"th.um"
)

//~~Filtering constants
const (
	filterBilinear* = 0
	filterNearest* = 1
)
//~~

//~~opaque Font
type Font* = struct { _: ^struct{} }
//~~


fn umth_font_load(path: str, size: th.fu, filter: uint32): ^struct{}
//~~fn load
fn load*(path: str, size: th.fu, filter: uint32 = filterBilinear): Font {
//~~
	return Font{umth_font_load(path, size, filter)}
}

fn umth_font_draw(font: Font, s: str, x: th.fu, y: th.fu, color: uint32, scale: th.fu)
//~~fn Font.draw
fn (f: ^Font) draw*(text: str, pos: th.Vf2, color: uint32, scale: th.fu = 1.0) {
//~~
	umth_font_draw(f^, text, pos.x, pos.y, color, scale)
}

//~~fn Font.validate
fn (f: ^Font) validate*(): bool {
//~~
	return f._ != null
}

fn umth_font_measure(font: Font, s: str, o: ^th.Vf2)
//~~fn Font.measure
fn (f: ^Font) measure*(text: str): th.Vf2 {
//~~
	var size: th.Vf2
	umth_font_measure(f^, text, &size)
	return size
}
