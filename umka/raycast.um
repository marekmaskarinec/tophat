// Rays allow for vroom fast
// collisions.

import (
	"entity.um"
	"polygon.um"
	"tilemap.um"
)

// Ray type.
type ray* = struct {
	x: real // position
	y: real
	l: int32 // length
	r: real // rotation
}

type cray = struct {
	x: int32
	y: int32
	l: int32
	r: int32
}

var colldatax, colldatay: int32

// Makes a ray. Just for consistency.
fn mk*(x, y, l, r: int32): ray {
	return ray{x, y, l, r}
}

fn craygetcoll(ix, iy: ^int32, count: int32, r: ^cray, s: ^entity.cent): int32
fn craygettmapcoll(r: ^cray, t: ^tilemap.ctmap, ix, iy: ^int32): bool

// Same as ent.getcoll. Same changes will apply.
fn (r: ^ray) getcoll*(s: []^entity.ent): int32 {
	cscn := make([]entity.cent, len(s))

	for i, e in s {
		cscn[i] = e.toc()
	}

	cr := cray{round(r.x), round(r.y), r.l, round(r.r)}

	return craygetcoll(&colldatax, &colldatay, len(cscn), &cr, &cscn[0])
}

// Returns, where the last collision happened.
fn retrievecolldata*(): (int32, int32) {
	return colldatax, colldatay
}

fn (r: ^ray) get_tmap_coll(t: tilemap.tmap, ix, iy: ^int32): bool {
	cr := cray{round(r.x), round(r.y), r.l, round(r.r)}

	ccm := make([]int32, len(t.collmask))
	for i:=0; i < len(t.collmask); i++ {
		ccm[i] = int32(t.collmask[i])
	}

	cm := tilemap.ctmap{^int(&t.tiles[0]), t.x, t.y, t.w, len(t.cells)/t.w, &t.cells[0], &ccm[0], t.cellsize, t.scaletype}

	return craygettmapcoll(&cr, &cm, ix, iy)
}
