
import (
	"rawdraw.um"
)

// img is an opaque pointer to c. It needs to be free'd with it's delete()
// method, otherwise it will cause a memory leak. This is usually ok as
// you only load images at the start of the game and need them until the
// end, but function operating on images might need to keep the memory in
// mind. 
type img* = struct {
	handle: int
}

fn loadimg(path: ^char): int

fn deleteimg(i: int)

fn iconset(i: int)

fn flipvimg(i: int)

fn fliphimg(i: int)

fn imgvalid(i: int): int32

fn imggetdims(w, h: ^int32, i: int)

fn imgcrop(img: int, x1, x2, y1, y2: int32)

fn imgfromdata(data: ^uint32, w: int32, h: int32): int

fn imgcopy(data: int): int

// Loads an image at path.
fn load*(path: str): img {
	return img{loadimg(&path[0])}
}

// Frees i from memory.
fn (i: ^img) delete*() {
	deleteimg(i.handle)
}

// Set's i as window icon. Works only on linux.
// **DEPRECATED**
fn (i: ^img) setasicon*() {
	iconset(i.handle)
}

// Flips i on it's vertical axis.
fn (i: ^img) flipv*() {
	flipvimg(i.handle)
}

// Flips i on it's horizontal axis.
fn (i: ^img) fliph*() {
	fliphimg(i.handle)
}

// Draws the image **not** accounting for camera.
fn (i: ^img) draw*(x, y, rot: int32, scale: real)  {
	rawdraw.cdrawimage(i.handle, rot, scale, x, y)
}

// Returns true, if i is valid. This doesn't mean it isn't corrupted.
fn (i: ^img) validate*(): bool {
	return bool(imgvalid(i.handle))
}

// Returns width and heigth.
fn (i: ^img) getdims*(): (int32, int32) {
	var w, h: int32
	imggetdims(&w, &h, i.handle)

	return w, h
}

// Crops out the rectangle from image. (destructive)
fn (i: ^img) crop*(x1, y1, x2, y2: int32) {
	imgcrop(i.handle, x1, x2, y1, y2)
}

// Creates an image from raw data.
// **BUGGY**
fn fromdata*(data: []uint32, w: int): img {
	return img{imgfromdata(&data[0], w, len(data)/w)}
}

// Copies image into a new one.
fn (i: ^img) copy*(): img {
	return img{imgcopy(i.handle)}
}

