// Module for frame based animation.

import (
	"th.um"
	"image.um"
	"rect.um"
)

// Anim can turn an array of images into an animation. The difference between
// anim and ent.animate is that Anim always starts by the first frame.
type Anim* = struct {
	anim: []image.Image
	rot: th.fu
	scale: th.fu
	fps: th.uu
	looping: bool

	pos: th.Vf2

	zeroTime: int

	frame: int
}

// Anim's constructor.
fn mk*(pos: th.Vf2, anm: []image.Image, fps: th.uu): Anim {
	a := Anim{}

	a.anim = append(anm, anm[len(anm)-1])

	a.fps = fps
	a.scale = 1
	a.rot = 0

	a.pos = pos

	a.looping = false

	return a
}

// Starts animation with start_time of t.
fn (a: ^Anim) start*(t: int) {
	a.zeroTime = t
}

// This draws the animation. Returns true, if the animation ended.
fn (a: ^Anim) handle*(t: uint, cam: rect.Rect): bool {
	a.frame = (round(real(t-a.zeroTime)/round((1000.0/a.fps))) % len(a.anim))

	a.anim[a.frame].draw(th.Vf2{round(a.pos.x) - cam.x + cam.w/2, round(a.pos.y) - cam.y + cam.h/2}, round(a.rot), th.Vf2{a.scale, a.scale})

	if a.frame == len(a.anim) - 1 {
		if a.looping {
			a.zeroTime = t
		} else {
			return true
		}
	}

	return false
}
