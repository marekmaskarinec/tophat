// Module for audio loading and playback.

import (
	"th.um"
)

// Sound is an opaque struct. Do not create manually.
type Sound* = struct {
	handle: int
}

fn cauload(path: str): int
fn csoundloop(s: int, looping: th.uu)
fn csoundplay(s: int) 
fn csoundstop(s: int)
fn csoundpause(s: int)
fn csoundvol(s: int, vol: th.fu)
fn csoundvalidate(s: int): th.uu

// Loads sound at a path.
fn load*(path: str): Sound {
	s := Sound{cauload(path)}

	return s
}

// Sets the Sound as looping. Off by default.
fn (s: ^Sound) looping*(l: bool) {
	if l {
		csoundloop(s.handle, 1)
		return
	}

	csoundloop(s.handle, 0)
}

// Plays the sound.
fn (s: ^Sound) play*() {
	csoundplay(s.handle)
}

// Stops the sound and resets the progress.
fn (s: ^Sound) stop*() {
	csoundstop(s.handle)
}

// Pauses the sound and keeps the progress.
fn (s: ^Sound) pause*() {
	csoundpause(s.handle)
}

// Set's the volume of the sound as a multiplier of it's default volume.
fn (s: ^Sound) vol*(vol: th.fu) {
	csoundvol(s.handle, vol)
}

// Returns true, if s points to a sound.
fn (s: ^Sound) validate*(): bool {
	return bool(csoundvalidate(s.handle))
}
