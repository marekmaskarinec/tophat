// Tilemaps allow for easy level construction or fast collisions. You can even
// use them for some games instead of entities (tetris comes to mind)

import (
	"csv.um"
	"image.um"
	"std.um"
	"rectangle.um"
	"entity.um"
	"polygon.um"
)

// Tilemap struct
type tmap* = struct {
	tiles: []image.img // tiles that are used to draw (you can replace them mid game for animation)
	x: int // position
	y: int
	w: int // width of tilemap
	cells: []int32 // all cells (this will draw the tile in tiles with number in cells - 1)
	collmask: []bool // if true, the tile collides
	cellsize: int // cellsize
	scaletype: int // how image scale is handled. 0: stretch, 1: top left
}

type ctmap* = struct {
	tiles: ^int
	x: int32
	y: int32
	w: int32
	h: int32
	cells: ^int32
	collmask: ^int32
	cellsize: int32
	scaletype: int32
}

const (
	STRETCH* = 0
	TOPLEFT* = 1
)

fn parse_num(inp: char): (int, bool) {
	if inp >= '0' && inp <= '9' {
		return int(inp) - int('0'), true
	}

	if inp >= 'A' && inp <= 'Z' {
		return int(inp) - int('A'), true
	}

	if inp >= 'a' && inp <= 'z' {
		return int(inp) - int('a'), true
	}

	return 0, false
}

// Makes a tilemap from csv string
fn mk*(inp: str, images: []image.img): tmap {
	res := csv.parse(inp)

	if len(res) < 2 { return tmap{} }
	if len(res[0]) < 2 { return tmap{} }
	if res[0][0] != "tophat tilemap" { return tmap{} }

	if len(res[1]) != len(images) {
		error("incorrect collision mask in tilemap")
	}
	collmask := make([]bool, len(res[1]))
	for i:=0; i < len(res[1]); i++ {
		if res[1][i] == "true" { collmask[i] = true; continue }
		collmask[i] = false
	}

	cells := []int32{}
	for i:=2; i < len(res); i++ {
		for j:=0; j < len(res[i]); j++ {
			if res[i][j] == "" {
				continue
			}

			val, check := parse_num(res[i][j][0])
			if !check {
				error("number in tilemap isn't valid")
			}

			if val > len(images) {
				error("number on " + repr(i) + ", " + repr(j) + "exceeds number of images")
			}

			cells = append(cells, val)
		}
	}

	return tmap{
		images, std.atoi(res[0][1]), std.atoi(res[0][2]),
		len(res[2]), cells, collmask, std.atoi(res[0][3]), std.atoi(res[0][4])}
}

// Sets tile at [x, y] to tile.
fn (t: ^tmap) edit*(x, y, tile: int) {
	t.cells[y*t.w + x] = tile
}

fn cdrawtmap(ct: ^ctmap, cam: ^rectangle.rect)

// Draws the tilemap.
fn (t: ^tmap) draw*(cam: rectangle.rect) {
	if len(t.cells) == 0 { return }

	ccm := make([]int32, len(t.collmask))
	for i:=0; i < len(t.collmask); i++ {
		ccm[i] = int32(t.collmask[i])
	}

	cm := ctmap{^int(&t.tiles[0]), t.x, t.y, t.w, len(t.cells)/t.w, &t.cells[0], &ccm[0], t.cellsize, t.scaletype}
	cdrawtmap(&cm, &cam)
}

fn ctmapgetcoll(tx, ty, x, y: ^int32, t: ^ctmap, e: ^entity.cent): int32

// Checks, if t collides with e.
// [rx, ry] is where the collision happened (usually one of the vertices)
// [tx, ty] is on which tile it happened.
// You need to pass a valid pointer (TODO)
fn (t: ^tmap) getcoll*(e: entity.ent, rx, ry, tx, ty: ^int32): bool {
	if len(t.cells) == 0 { return false }

	ccm := make([]int32, len(t.collmask))
	for i:=0; i < len(t.collmask); i++ {
		ccm[i] = int32(t.collmask[i])
	}

	cm := ctmap{^int(&t.tiles[0]), t.x, t.y, t.w, len(t.cells)/t.w, &t.cells[0], &ccm[0], t.cellsize, t.scaletype}

	c := ctmapgetcoll(tx, ty, rx, ry, &cm, &e.toc())

	return bool(c)
}
