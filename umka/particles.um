//~~
// Particles allow for *performant* and random particle systems.
//~~

import (
	"std.um"
	"th.um"
)

//~~struct Particle
// Particle struct. You can tweak the start_time for godot-like explossivness.
type Particle* = struct {
//~~
	start_time: uint
	seed: int32
}

//~~struct Emitter
// Emitter. This is where everything is configured.
type Emitter* = struct {
	pos: th.Vf2 // position
	dm: th.Vf2 // size of the emittion area
	gravity: th.Vf2 // gravity
	repeat: bool // if false, particle won't be renewed
	active: bool // false, if there aren't any active particles anymore

	angle: th.Vf2 // angle in which particles are emitted

	lifetime: th.uu // lifetime of particles
	lifetimeRandomness: th.fu // randomness in %/100

	velocity: th.fu // velocity
	velocityRandomness: th.fu // randomness in %/100

	size: th.fu // size
	sizeRandomness: th.fu // randomness in %/100
	maxSize: th.fu // size at the end of particles lifetime

	rotation: th.fu
	rotationRandomness: th.fu
	maxRotation: th.fu

	colors: []uint32 // array of colors, which are interpolated between

	particles: []Particle // list of particles
}
//~~

fn umth_particles_draw(p: ^Emitter, t: int32)
//~~fn Emitter.draw
// Draws and updates the particles.
fn (e: ^Emitter) draw*(t: int32) {
//~~
	if len(e.colors) <= 0 || len(e.particles) <= 0 {
		return
	}

	umth_particles_draw(e, t)
}

//~~fn Emitter.genParticles
// Generates particles for an emitter. The time specifies the time the first
// particles is emitted. The explosiveness argument specifies the interval at
// which particles are emitted using this formula:
/// ```umka
/// e.lifetime / count * explosiveness
/// ```
fn (e: ^Emitter) genParticles*(time, count: uint, explosiveness: th.fu = 0.0) {
//~~
	p := make([]Particle, count)

	step := real32(e.lifetime) / count * explosiveness
	t := real32(time)

	for i in p {
		p[i] = { trunc(t), std.rand() }
		t += step
	}

	e.particles = p
}
