// Particles allow for *performant* and random particle systems.
// TODO: a better constructor

import (
	"th.um"
	"rect.um"
)

// Particle struct. You can tweak the start_time for godot-like explossivness.
type Particle* = struct {
	start_time: uint
	seed: int32
}

// Emitter. This is where everything is configured.
type Emitter* = struct {
	pos: th.Vf2 // position
	dm: th.Vf2 // size of the emittion area
	gravity: th.Vf2 // gravity
	repeat: bool // if false, particle won't be renewed
	active: bool // false, if there aren't any active particles anymore
	
	angle: th.Vf2 // angle in which particles are emitted

	lifetime: th.uu // lifetime of particles
	lifetimeRandomness: th.fu // randomness in %/100

	velocity: th.fu // velocity
	velocityRandomness: th.fu // randomness in %/100

	size: th.fu // size
	sizeRandomness: th.fu // randomness in %/100
	maxSize: th.fu // size at the end of particles lifetime

	rotation: th.fu
	rotationRandomness: th.fu
	maxRotation: th.fu

	colors: []uint32 // array of colors, which are interpolated between
	
	particles: []Particle // list of particles
}

// Emitter. This is where everything is configured.
type c_emitter* = struct {
	pos: th.Vf2 // position
	dm: th.Vf2 // size of the emittion area
	gravity: th.Vf2 // gravity
	repeat: bool // if false, particle won't be renewed
	active: bool // false, if there aren't any active particles anymore
	
	angle: th.Vf2 // angle in which particles are emitted

	lifetime: th.uu // lifetime of particles
	lifetime_randomness: th.fu // randomness in %/100

	velocity: th.fu // velocity
	velocity_randomness: th.fu // randomness in %/100

	size: th.fu // size
	size_randomness: th.fu // randomness in %/100
	max_size: th.fu // size at the end of particles lifetime

	rotation: th.fu
	rotation_randomness: th.fu
	max_rotation: th.fu

	colors: ^uint32 // array of colors, which are interpolated between
	colorc: th.uu
	
	particles: ^Particle // list of particles
	particlec: th.uu
}

fn c_particles_draw(p: ^c_emitter, cam: ^rect.Rect, t: int32)

// Draws and updates the particles.
fn (e: ^Emitter) draw*(cam: rect.Rect, t: int32) {
	ce := c_emitter{
		e.pos,
		e.dm,
		e.gravity,
		e.repeat, e.active,
		e.angle,
		e.lifetime, e.lifetimeRandomness,
		e.velocity, e.velocityRandomness,
		e.size, e.sizeRandomness, e.maxSize,
		e.rotation, e.maxRotation, e.rotationRandomness,
		&e.colors[0], len(e.colors),
		&e.particles[0], len(e.particles)}

	c_particles_draw(&ce, &cam, t)
	e.active = ce.active
}
