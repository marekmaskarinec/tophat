//~~
// Module for getting keyboard and mouse input.
// is* functions return info based on a us QWERTY layout. They are supposed to
// be used for game controls. For text input use getStr.
//~~

import (
    "th.um"
    "rect.um"
)

//~~Keycode constants
const (
    mouse1*              = 1
    mouse2*              = 2
    mouse3*              = 3

    key_ctrl*            = 16
    key_shift*           = 17
    key_alt*             = 18

    key_space*           = 32
    key_apostrophe*      = 39  /* ' */
    key_comma*           = 44  /* , */
    key_minus*           = 45  /* - */
    key_dot*             = 46  /* . */
    key_slash*           = 47  /* / */
    key_0*               = 48
    key_1*               = 49
    key_2*               = 50
    key_3*               = 51
    key_4*               = 52
    key_5*               = 53
    key_6*               = 54
    key_7*               = 55
    key_8*               = 56
    key_9*               = 57
    key_semicolon*       = 59  /* ; */
    key_equal*           = 61  /* = */
    key_a*               = 65
    key_b*               = 66
    key_c*               = 67
    key_d*               = 68
    key_e*               = 69
    key_f*               = 70
    key_g*               = 71
    key_h*               = 72
    key_i*               = 73
    key_j*               = 74
    key_k*               = 75
    key_l*               = 76
    key_m*               = 77
    key_n*               = 78
    key_o*               = 79
    key_p*               = 80
    key_q*               = 81
    key_r*               = 82
    key_s*               = 83
    key_t*               = 84
    key_u*               = 85
    key_v*               = 86
    key_w*               = 87
    key_x*               = 88
    key_y*               = 89
    key_z*               = 90
    key_left_bracket*    = 91  /* [ */
    key_backslash*       = 92  /* \ */
    key_right_bracket*   = 93  /* ] */
    key_grave_accent*    = 96  /* ` */
    key_world_1*         = 161 /* non-US #1 */
    key_world_2*         = 162 /* non-US #2 */
    key_escape*          = 256
    key_enter*           = 257
    key_tab*             = 258
    key_backspace*       = 259
    key_insert*          = 260
    key_delete*          = 261
    key_right*           = 262
    key_left*            = 263
    key_down*            = 264
    key_up*              = 265
    key_page_up*         = 266
    key_page_down*       = 267
    key_home*            = 268
    key_end*             = 269
    key_caps_lock*       = 280
    key_scroll_lock*     = 281
    key_num_lock*        = 282
    key_print_screen*    = 283
    key_pause*           = 284
	key_fn*              = 289
    key_fn1*             = 290
    key_fn2*             = 291
    key_fn3*             = 292
    key_fn4*             = 293
    key_fn5*             = 294
    key_fn6*             = 295
    key_fn7*             = 296
    key_fn8*             = 297
    key_fn9*             = 298
    key_fn10*            = 299
    key_fn11*            = 300
    key_fn12*            = 301
    key_fn13*            = 302
    key_fn14*            = 303
    key_fn15*            = 304
    key_fn16*            = 305
    key_fn17*            = 306
    key_fn18*            = 307
    key_fn19*            = 308
    key_fn20*            = 309
    key_fn21*            = 310
    key_fn22*            = 311
    key_fn23*            = 312
    key_fn24*            = 313
    key_fn25*            = 314
    key_kp_0*            = 320
    key_kp_1*            = 321
    key_kp_2*            = 322
    key_kp_3*            = 323
    key_kp_4*            = 324
    key_kp_5*            = 325
    key_kp_6*            = 326
    key_kp_7*            = 327
    key_kp_8*            = 328
    key_kp_9*            = 329
    key_kp_decimal*      = 330
    key_kp_divide*       = 331
    key_kp_multiply*     = 332
    key_kp_subtract*     = 333
    key_kp_add*          = 334
    key_kp_enter*        = 335
    key_kp_equal*        = 336
    key_left_shift*      = 340
    key_left_control*    = 341
    key_left_alt*        = 342
    key_left_super*      = 343
    key_right_shift*     = 344
    key_right_control*   = 345
    key_right_alt*       = 346
    key_right_super*     = 347
    key_menu*            = 348
)
//~~

fn umth_input_get_mouse(out: ^th.Vf2)
//~~fn getMousePos
// Returns the position of mouse cursor in relation to the screen.
fn getMousePos*(): th.Vf2 {
//~~
	out := th.Vf2{}
	umth_input_get_mouse(&out)
	return out
}

//~~fn getGlobalMousePos
// Returns the position of mouse cursor in relation to cam.
fn getGlobalMousePos*(cam: rect.Rect): th.Vf2 {
//~~
	return cam.toWorld(getMousePos())
}

fn umth_input_is_pressed(keycode: int): int32
//~~fn isPressed
// Returns true if key is pressed. Either use codes defined in the file above,
// or pass lower case char/number.
fn isPressed*(code: int): bool {
//~~
	val := bool(umth_input_is_pressed(code))
	return val
}

//~~fn isPressedc
// Like `isPressed`, but you can pass char as the code.
fn isPressedc*(code: char): bool {
//~~
	return isPressed(int(code))
}

fn umth_input_is_just_pressed(key: int): int32
//~~fn isJustPressed
// Returns, whether code was just pressed this loop.
fn isJustPressed*(code: int): bool {
//~~
	return bool(umth_input_is_just_pressed(code))
}

//~~fn isJustPressedc
// Like `isJustPressed`, but you can pass char as the code.
fn isJustPressedc*(code: char): bool {
//~~
	return isJustPressed(int(code))
}

fn umth_input_is_just_released(key: int): int32
//~~fn isJustReleased
// Returns true if a key was just released.
fn isJustReleased*(code: int): bool {
//~~
	return bool(umth_input_is_just_released(code))
}
//~~fn isJustReleasedc
// Like `isJustReleased`, but you can pass char as the code.
fn isJustReleasedc*(code: char): bool {
//~~
	return isJustReleased(int(code))
}

fn umth_input_clear*(code: int)
//~~fn clear
// Clears both the pressed and justPressed state of a code.
fn clear*(code: int) {
//~~
	umth_input_clear(code)
}

fn umth_input_get_str(): str
//~~fn getStr
// Returns a string entered by the user in the last cycle.
fn getStr*(): str {
//~~
	return umth_input_get_str()
}

fn umth_input_get_mouse_delta(o: ^th.Vf2)
//~~fn getMouseDelta
// Returns the difference between mouse positions in the last cycle. Will work
// even if `window.freezeCursor` is enabled.
fn getMouseDelta*(): th.Vf2 {
//~~
	o := th.Vf2{}
	umth_input_get_mouse_delta(&o)
	return o
}

fn umth_input_get_mouse_scroll(x, y: ^th.fu)
//~~fn getMouseScroll
// Returns the scroll wheel value
fn getMouseScroll*(): th.Vf2 {
//~~
    var x, y: th.fu
    umth_input_get_mouse_scroll(&x, &y)
    return th.Vf2{x, y}
}