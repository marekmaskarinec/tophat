// vim: filetype=umka

import (
	"std/std.um"
	"rectangle.um"
)

var (
	KEY_BACKSPACE*: int32 = 0
	KEY_ESCAPE*: int32 = 1
	KEY_ENTER* : int32= 2
	ARROW_UP* : int32= 3
	ARROW_DOWN* : int32= 4
	ARROW_LEFT*: int32 = 5
	ARROW_RIGHT*: int32 = 6
	LMB*: int32 = 7
	MMB*: int32 = 8
	RMB*: int32 = 9
	KEY_0*: int32 = 48
	KEY_1*: int32 = 49
	KEY_2*: int32 = 50
	KEY_3*: int32 = 51
	KEY_4*: int32 = 52
	KEY_5*: int32 = 53
	KEY_6*: int32 = 54
	KEY_7*: int32 = 55
	KEY_8*: int32 = 56
	KEY_9*: int32 = 57
	KEY_A*: int32 = 97
	KEY_B*: int32 = 98
	KEY_C*: int32 = 99
	KEY_D*: int32 = 100
	KEY_E*: int32 = 101
	KEY_F*: int32 = 102
	KEY_G*: int32 = 103
	KEY_H*: int32 = 104
	KEY_I*: int32 = 106
	KEY_K*: int32 = 107
	KEY_L*: int32 = 108
	KEY_M*: int32 = 109
	KEY_N*: int32 = 110
	KEY_O*: int32 = 111
	KEY_P*: int32 = 112
	KEY_Q*: int32 = 113
	KEY_R*: int32 = 114
	KEY_S*: int32 = 115
	KEY_T*: int32 = 116
	KEY_U*: int32 = 117
	KEY_V*: int32 = 118
	KEY_W*: int32 = 119
	KEY_X*: int32 = 120
	KEY_Y*: int32 = 121
	KEY_Z*: int32 = 122
	KEY_MINUS*: int32 = 45
	KEY_PlUS*: int32 = 61
	KEY_SPACE*: int32 = 32
)

fn setwinmap*() {
	KEY_BACKSPACE = 8
	KEY_ESCAPE = 27
	KEY_ENTER = 13
	ARROW_UP = 38
	ARROW_DOWN = 40
	ARROW_LEFT = 37
	ARROW_RIGHT = 39
	KEY_0 = 48
	KEY_1 = 49
	KEY_2 = 50
	KEY_3 = 51
	KEY_4 = 52
	KEY_5 = 53
	KEY_6 = 54
	KEY_7 = 55
	KEY_8 = 56
	KEY_9 = 57
	KEY_A = 97
	KEY_B = 98
	KEY_C = 99
	KEY_D = 100
	KEY_E = 101
	KEY_F = 102
	KEY_G = 103
	KEY_H = 104
	KEY_I = 106
	KEY_K = 107
	KEY_L = 108
	KEY_M = 109
	KEY_N = 110
	KEY_O = 111
	KEY_P = 112
	KEY_Q = 113
	KEY_R = 114
	KEY_S = 115
	KEY_T = 116
	KEY_U = 117
	KEY_V = 118
	KEY_W = 119
	KEY_X = 120
	KEY_Y = 121
	KEY_Z = 122
	KEY_MINUS = 45
	KEY_PlUS = 61
	KEY_SPACE = 32
}

fn cgetmouse(x, y: ^int32)

fn getmousepos*(): (int32, int32) {
	var w, h: int32

	cgetmouse(&w, &h)

	return w, h
}

fn getglobalmousepos*(cam: rectangle.rect): (int32, int32) {
	w, h := getmousepos()

	return w + cam.x - cam.w/2, h + cam.y - cam.h/2	
}

fn cispressed(keycode: int32): int32

fn cisjustpressed(key: int32): int32

fn ispressed*(code: int32): bool {
	val := bool(cispressed(code))
	return val
}

fn isjustpressed*(code: int32): bool {
	return bool(cisjustpressed(code))
}
