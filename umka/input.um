// vim: filetype=umka

import (
	"std/map.um"
	"rectangle.um"
)

var keycodes: map.Map

fn getkeycode(s: str): int32 {

	switch s[0] {
	case 'a':
		return 97
	case 'b':
		return 98
	case 'c':
		return 99
	case 'd':
		return 100
	case 'e':
		return 101
	case 'f':
		return 102
	case 'g':
		return 103
	case 'h':
		return 104
	case 'i':
		return 105
	case 'j':
		return 106
	case 'k':
		return 107
	case 'l':
		return 108
	case 'm':
		return 109
	case 'n':
		return 110
	case 'o':
		return 111
	case 'p':
		return 112
	case 'q':
		return 113
	case 'r':
		return 114
	case 's':
		return 115
	case 't':
		return 116
	case 'u':
		return 117
	case 'v':
		return 118
	case 'w':
		return 119
	case 'x':
		return 120
	case 'y':
		return 121
	case 'z':
		return 122
	}

	return -1
}

fn cgetmouse(x, y: ^int32)

fn getmousepos*(): (int32, int32) {
	var w, h: int32

	cgetmouse(&w, &h)

	return w, h
}

fn getglobalmousepos*(cam: rectangle.rect): (int32, int32) {
	w, h := getmousepos()

	return w + cam.x - cam.w/2, h + cam.y - cam.h/2	
}

fn cispressed(keycode: int32): int32

fn cisjustpressed(key: int32): int32

fn ispressed*(key: str): bool {
	code := getkeycode(key)
	if code == -1 {
		return false
	}

	val := bool(cispressed(code))
	return val
}

fn isjustpressed*(key: str): bool {
	code := getkeycode(key)

	return bool(cisjustpressed(code))
}
