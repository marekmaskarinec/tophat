// Module for getting keyboard and mouse input.
// Keycodes are ascii chars (lower case) and the constants below.
//   mouse1
//   mouse2
//   mouse3
//   key_shift
//   key_backspace
//   key_delete
//   key_left
//   key_right
//   key_up
//   key_down
//   key_escape
//   key_enter
// 
// is* functions return info based on a us QWERTY layout. They are supposed to
// be used for game controls. For text input use getStr.

import (
	"th.um"
	"rect.um"
)

const (
	mouse1* =        char(1)
	mouse2* =        char(2)
	mouse3* =        char(3)
	mouse_up* =      char(4)
	mouse_down* =    char(5)
	key_shift* =     char(16   + 0x7f)
	key_backspace* = char(8    + 0x7f)
	key_delete* =    char(46   + 0x7f)
	key_left* =      char(37   + 0x7f)
	key_right* =     char(39   + 0x7f)
	key_up* =        char(38   + 0x7f)
	key_down* =      char(40   + 0x7f)
	key_escape* =    char(27   + 0x7f)
	key_enter* =     char(13   + 0x7f)	
	key_alt* =       char(0x12 + 0x7f)
	key_ctrl* =      char(0x11 + 0x7f)
)

fn umth_input_get_mouse(out: ^th.Vf2)
// Returns the position of mouse cursor in relation to the screen.
fn getMousePos*(): th.Vf2 {
	out := th.Vf2{}
	umth_input_get_mouse(&out)
	return out
}

// Returns the position of mouse cursor in relation to cam.
fn getGlobalMousePos*(cam: rect.Rect): th.Vf2 {
	return cam.toWorld(getMousePos())
}

fn umth_input_is_pressed(keycode: char): int32
// Returns true if key is pressed. Either use codes defined in the file above,
// or pass lower case char/number.
fn isPressed*(code: char): bool {
	val := bool(umth_input_is_pressed(code))
	return val
}

fn umth_input_is_just_pressed(key: char): int32
// Returns, whether code was just pressed this loop.
fn isJustPressed*(code: char): bool {
	return bool(umth_input_is_just_pressed(code))
}

fn umth_input_is_just_released(key: char): int32
// Returns true if a key was just released.
fn isJustReleased*(code: char): bool {
	return bool(umth_input_is_just_released(code))
}

fn umth_input_clear*(code: char)
// Clears both the pressed and justPressed state of a code.
fn clear*(code: char) {
	umth_input_clear(code)
}

fn umth_input_get_str(): str
// Returns a string entered by the user in the last cycle.
fn getStr*(): str {
	return umth_input_get_str()
}
