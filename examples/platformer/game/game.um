
import (
	"canvas.um"
	"input.um"
	"signal.um"
	"th.um"
	"window.um"

	"env.um"
	"bees.um"
	"player.um"
	"../global.um"
)

const (
	stateGame = 1
	stateFinished = 2
)

var (
	state: int
	finishTime: int
	deathCount: int
)

fn reset*() {
	env.reset()
	bees.reset()
	player.reset()
}

fn setup*() {
	env.setup()
	bees.setup()
	player.setup()

	signal.register("die", {
		reset()
		deathCount++
	})

	signal.register("finish", {
		finishTime = th.time - env.start
		state = stateFinished
	})

	state = stateGame
}

fn handle*() {
	switch state {
	case stateGame:
		env.handle()
		bees.handle()
		player.handle()
	case stateFinished:
		if input.isJustPressed(input.Key.enter) {
			state = stateGame
			reset()
		}
	}
}

fn draw*() {
	env.draw()
	bees.draw()
	player.draw()

	wpoff := window.getViewportOffset()
	window.setViewportOffset({})

	switch state {
	case stateGame:
		canvas.drawText(sprintf("%v\n%s", env.score, global.timeStr(th.time - env.start)),th.Vf2{1, 1}, 0xddddddff, 2)
	case stateFinished:
		canvas.drawText(sprintf(
			"TIME: %s\nNUMBER OF DEATHS: %d\nSCORE: %d\nPRESS ENTER\nTO TRY AGAIN",
			global.timeStr(finishTime), deathCount, env.score),
			{}, 0xddddddff, 2)
	}

	window.setViewportOffset(wpoff)
}

