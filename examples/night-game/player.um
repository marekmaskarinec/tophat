
import (
	"light.um"
	"input.um"
	"tophat.um"
	"vec.um"
	"entity.um"
	"global.um"
)

type plr* = struct {
	px, py: real
	rot: int32
	light1, light2: light.cone
	collent: entity.ent
	maxspeed: real
}

fn (p: ^plr) handle*() {
	msx, msy := input.getglobalmousepos(global.cam)
	p.rot = round(vec.angleto(p.px, p.py, msx, msy))
	p.light1.rot = p.rot
	p.light2.rot = p.rot

	mx, my := vec.rotatepoint(-1, 0, 0, 0, real(p.rot))
	speed := 0.0
	if input.ispressed(input.KEY_W) {
		speed = p.maxspeed
	}

	if input.ispressed(input.KEY_S) {
		speed -= p.maxspeed
	}

	p.px += mx * speed * tophat.delta
	p.py += my * speed * tophat.delta

	p.light1.px = round(p.px)
	p.light1.py = round(p.py)
	p.light2.px = round(p.px)
	p.light2.py = round(p.py)

	p.light1.draw(global.cam)
}
