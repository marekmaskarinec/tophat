// vim: filetype=umka

import (
	"tophat/tophat.um"
	"tophat/rectangle.um"
	"tophat/rawdraw.um"
	"tophat/polygon.um"
	"tophat/entity.um"
	"tophat/input.um"
	"tophat/std/std.um"
	"tophat/audio.um"
)

// global variables
var (
	fruit: entity.ent
	head: entity.ent
	score: int
	cam: rectangle.rect
	tails: []entity.ent
	s: []^entity.ent
	dead: bool
	direction: int
	running: bool
)

// function, that adds tail
fn addtail() {
	// making tail polygon
	p := polygon.mk(-300, -300, []int32{2, 2, 2, 4, 4, 4, 4, 2})

	// creating entity and appending it to the list of tails
	tails = append(tails, []entity.ent{ entity.mk(p, 0x000000ff, 4) })
}

// this function is called on collision with food
fn eatfruit() {
	score++
	
	// setting fruit's position randomly
	fruit.p.x = std.rand()%((cam.w/6-1)+1)*6
	fruit.p.y = std.rand()%((cam.h/6-1)+1)*6

	// adding tail
	addtail()
}

// die function
fn die() {
	dead = true
}

fn deathscreen() {
	rawdraw.drawtext("You died\nscore: " + std.itoa(score) + "\npress r to retry", 4, 4, 0x000000ff, 1.5)

	if input.isjustpressed(input.KEY_R) {
		score = 0
		head.p.x = 24
		head.p.y = 24
		direction = 5
		tails = []entity.ent{}
		s = []^entity.ent{&head, &fruit}
		dead = false
	}
	if input.isjustpressed(input.KEY_ESCAPE) {
		running = false
	}
}

fn main() {
	// opens window with title snake and sets up engine
	tophat.setup("snake", 960, 540)

	// create scene, that will be used for collisions
	s = []^entity.ent{}

	dead = false
	running = true

	// these values will be filled with screen dimensions
	var w, h: int32

	// creates camera. camera position is the center not top left corner
	cam = rectangle.mk(48, 27, 96, 54)

	// creates block polygon
	headp := polygon.mk(12, 12, []int32{1, 1, 1, 5, 5, 5, 5, 1})
	
	// creates entity
	head = entity.mk(headp, 0x000000ff, 2)

	// creates fruit polygon and entity
	fruitp := polygon.mk(std.rand()%((cam.h/6-1)+1)*6, std.rand()%((cam.h/6-1)+1)*6, []int32{1, 3, 3, 5, 5, 3, 3, 1})
	fruit = entity.mk(fruitp, 0x000000ff, 1)

	// eat sound
	eatSound := audio.load("fruit.wav")
	eatSound.vol(1.6)

	// list of tail blocks
	tails = []entity.ent{}	

	// direction the snake is heading
	direction = 4

	// time, when snake moved last
	var lastmove: int

	// move speed in seconds
	speed := 200

	// adding entities to scene
	s = append(s, []^entity.ent{&head, &fruit})

	// variable, we will use for storing collision
	var coll: int32

	lastmove = 0
	t := 0

	std.srand(std.time())

	for running {
		t += tophat.delta
		// performs important stuff in engine
		tophat.cycle(&w, &h, 0xffffffff, cam)

		// running death screen. this isn't the way to do this. see the structured-project example.
		if dead {
			deathscreen()
			continue
		}

		// input
		if input.isjustpressed(input.KEY_A) && direction != 0 {
			direction = 0
			lastmove = 0
		}
		if input.isjustpressed(input.KEY_D) && direction != 2 {
			direction = 2
			lastmove = 0
		}
		if input.isjustpressed(input.KEY_W) && direction != 1 {
			direction = 1
			lastmove = 0
		}
		if input.isjustpressed(input.KEY_S) && direction != 3 {
			direction = 3
			lastmove = 0
		}
		if input.isjustpressed(input.KEY_ESCAPE) {
			break
		}

		// checks, if snake can move. if yes, it moves him
		if (t - lastmove) >= speed {
			for i:=len(tails)-1; i >= 1; i-- {
				tails[i].p.x = tails[i-1].p.x
				tails[i].p.y = tails[i-1].p.y
			}
			if len(tails) > 0	{
				tails[0].p.x = head.p.x
				tails[0].p.y = head.p.y
			}

			switch direction {
			case 0:
				head.p.x -= 6
			case 1:
				head.p.y -= 6
			case 2:
				head.p.x += 6
			case 3:
				head.p.y += 6
			}
			lastmove = t
		}
	
		// checking, if snake is out of bounds to kill him
		if head.p.x < 0 || head.p.x >= cam.w || head.p.y < 0 || head.p.y >= cam.h {
			die()
		}

		// updating scene
		s = []^entity.ent{&head, &fruit}
		for t in tails {
			s = append(s, &t)
		}

		// checks for collisions in scene s
		coll = head.getcoll(s)
		switch coll {
		case 1:
			eatSound.play()
			eatfruit()
		case 4:
			die()
		}	

		// drawing entities
		head.draw(cam)
		fruit.draw(cam)
		for i:=0; i < len(tails); i++ {
			tails[i].draw(cam)
		}

		// drawing score text
		rawdraw.drawtext("SCORE: " + std.itoa(score), 2, 2, 0x000000ff, 1)
	}
}
