
import (
	"th.um"
	"std.um"
	"lerp.um"
	"global.um"
	"canvas.um"
	"particles.um"
)

var (
	dmgEffect: lerp.Lerper
	emitters: []particles.Emitter
)

fn init*() {
	dmgEffect = lerp.Lerper{}
	emitters = []particles.Emitter{}
}

fn handle*() { }

fn damage*() {
	dmgEffect.enqueue(
		lerp.Item{0, 0xaa, 200, 0, false, null, fn(ctx: any){}})
	dmgEffect.enqueue(
		lerp.Item{0xaa, 0, 200, 0, false, null, fn(ctx: any){}})
}

fn enemyDestroy*(pos: th.Vf2) {
	const particlec = 2000
	e := particles.Emitter{
		pos, th.Vf2{0, 0},
		th.Vf2{0.1, 0.1}, false, true,

		th.Vf2{0, 360},
		200, 0.4,
		0.4, 0.2,
		0.4, 0.2, 2,
		0, 0, 0,
		[]uint32{0xFFA500ff, 0xe9330caa},
		make([]particles.Particle, particlec)}

	for i:=0; i < len(e.particles); i++ {
		e.particles[i] = particles.Particle{
			th.time + std.rand() % 200,
			std.rand()}
	}

	emitters = append(emitters, e)
}

fn draw*() {
	if len(dmgEffect) != 0 {
		val := round(dmgEffect.byDelta(th.delta))
		if val < 0 { val = 0 }
		canvas.drawRect(0xaa000000 | val, global.cam)
	}

	for i:=0; i>=0 && i < len(emitters) && len(emitters) != 0; i++ {
		emitters[i].draw(global.cam, th.time)
		if !emitters[i].active {
			if len(emitters) == 1 {
				emitters = []particles.Emitter{}
				continue
			}
			emitters = delete(emitters, i)
			i--
		}
	}
}
