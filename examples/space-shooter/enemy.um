
import (
	"entity.um"
	"rectangle.um"
	"polygon.um"
	"image.um"
	"input.um"
	"tophat.um"
	"rawdraw.um"
	"animation.um"
	"tophat.um"
	"audio.um"

	"std.um"

	"global.um"
	"settings.um"
	"effects.um"
	"sounds.um"
)

// main enemy struct
type enm* = struct {
	ent: entity.ent
	mx: int32
	my: int32
}

var (
	prefab*: entity.ent
	all*: []enm
	espeed*: real

	explosion: []image.img
)

fn init*() {
	prefab = entity.mk(polygon.mk(0, 0, []int32{0, 0, 0, 80, 80, 80, 80, 0}), 0xffffffff, 0) // prefab used for new enemies
	prefab.image = image.load("graphics/enemy.png")
	prefab.setscale(0.1, 0.1)
	all = []enm{} // list of all enemies
	espeed = 0.04 // enemy speed

	explosion = []image.img{image.load("graphics/explosion/1.png"), image.load("graphics/explosion/2.png"), image.load("graphics/explosion/3.png"), image.load("graphics/explosion/4.png")} // animation frames played, when enemy dies
}

// function called, when bullet collides with enemy
fn die*(id: int32) {
	for i:=0; i < len(all); i++ { // searching all array for enemy with correct id
		if all[i].ent.id == id {
			// creating new animation
			ca := len(effects.anims)
			effects.anims = append(effects.anims, animation.mk(round(all[i].ent.p.x), round(all[i].ent.p.y), explosion, 16))
			effects.anims[ca].start(tophat.t)
			sounds.explosion.play() // playing sound
			all	= delete(all, i) // deleting enemy
			return // exiting
		}
	}
}

// enemy spawn function
fn spawn(cam: rectangle.rect) {
	ce := len(all)
	all = append(all, enm{prefab, 0, std.rand()%3-1})
	all[ce].ent.p.y = 4 - cam.y - cam.h/2
	all[ce].ent.p.x = (std.rand()%cam.w-8) - cam.x - cam.w/2 + 4
	all[ce].ent.id = std.rand()%2000+200
}

// this function returns list of enemies, that will then be used by bullets
fn handle*(): []^entity.ent {
	// deciding, if we should spawn new enemies
	if len(all) < global.score/800 + 2 + std.rand()%2 {
		spawn(global.cam)
	}

	scn := []^entity.ent{}
	for i:=0; i < len(all); i++ {
		scn = append(scn, &all[i].ent) // appending pointer to the enemy to scene
	
		// this isn't a good mechanic, but can be enabled in settings
		if settings.enemyxmotion {
			if std.rand()%50 < 1 || all[i].ent.p.x >= 40 || all[i].ent.p.x <= -40 { // checks, if enemy is on the edge, or random number is < 1 to change enemy motion
				all[i].mx = std.rand()%3 - 1
				all[i].my = std.rand()%3 - 1
			}
		}

		if all[i].ent.p.y >= 72 { // checking, if enemy is at the bottom of the screen
			global.takedmg()
			sounds.damage.play() // playing sound
			all = delete(all, i) // deleting enemy
			continue
		}

		// moving enemy
		all[i].ent.p.x += espeed / 2 * tophat.delta * all[i].mx
		all[i].ent.p.y += espeed * tophat.delta

		// drawing enemy
		all[i].ent.draw(global.cam)
	}
	
	return scn
}
